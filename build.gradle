/*
 *    Copyright (C) 2018 QAware GmbH
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}


plugins {
    id "com.github.hierynomus.license" version "0.16.1"
    id "org.sonarqube" version "3.5.0.2730"
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "1.2.1"
    id 'base'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'maven-publish'
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation(localGroovy())

    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-3.0'
    testImplementation 'org.spockframework:spock-junit4:2.4-M1-groovy-3.0'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

sourceSets {
    test {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs 'src/test/groovy'
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/*Generated.java, build/generated/**"
        property "sonar.projectName", "XSD2Java Gradle Plugin"
    }
}

license {
    skipExistingHeaders = true
    header rootProject.file('LICENSE')
    includes(["**/*.java", "**/*.groovy", "**/*.scala"])
    mapping {
        java = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        scala = 'SLASHSTAR_STYLE'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

def pomConfig = {

    inceptionYear '2018'

    scm {
        connection "scm:git:${project.scmUrl}"
        developerConnection "scm:git:${project.scmUrl}"
        url project.websiteUrl
    }

    issueManagement {
        system 'GitHub'
        url project.issueTrackerUrl
    }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    organisation {
        name 'QAware GmbH'
        url 'https://www.qaware.de'
    }

    developers {
        developer {
            id 'chr-fritz'
            name 'Christian Fritz'
            email 'christian.fritz@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
        developer {
            id 'lreimer'
            name 'Mario-Leander Reimer'
            email 'mario-leander.reimer@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
    }
}

def snapshotURL = project.hasProperty('snapshotUrl') ? project.snapshotUrl : ''
def releaseURL = project.hasProperty('releaseUrl') ? project.releaseUrl : ''

publishing {
    publications {
        xsd2javaPlugin(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar

            pom.withXml {
                asNode().appendNode('name', project.displayName)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + pomConfig
            }
        }
    }
    repositories {
        // set the properties via -P to publish to your company repo
        maven {
            url = "${project.version.endsWith('-SNAPSHOT') ? snapshotURL : releaseURL}"
            credentials {
                username = project.hasProperty('nexusUsername') ? project.nexusUsername : ''
                password = project.hasProperty('nexusPassword') ? project.nexusPassword : ''
            }
        }
    }
}

pluginBundle {
    website = project.websiteUrl
    vcsUrl = project.scmUrl

    plugins {
        xsd2javaPlugin {
            id = 'de.qaware.gradle.plugin.xsd2java'
            displayName = project.displayName
            description = project.description
            tags = ['xsd2java', 'code', 'generation']
            version = project.version
            implementationClass = 'de.qaware.gradle.plugin.xsd2java.xjc.Xsd2JavaPlugin'
        }
    }
}